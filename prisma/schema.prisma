// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Pokemon {
  id                     String      @id @unique
  name                   String
  supertype              String
  subtypes               String[]
  hp                     Int?
  types                  String[]
  evolvesFrom            String?
  abilities              Ability[]
  attacks                Attack[]
  weaknesses             Weakness[]
  retreatCost            String[]
  convertedRetreatCost   Int
  setId                  String      @map("set_id")
  set                    Set         @relation(fields: [setId], references: [id], onDelete: Cascade)
  number                 String
  rules                  String[]
  regulationMark         String?
  artist                 String?
  rarity                 String
  flavorText             String?
  nationalPokedexNumbers Int[]
  legalitiesId           String?     @map("legalities_id")
  legalities             Legalities? @relation(fields: [legalitiesId], references: [id], onDelete: Cascade)
  imagesId               String?     @map("images_id")
  images                 Images?     @relation(fields: [imagesId], references: [id], onDelete: Cascade)
  tcgplayerId            String?     @map("tcgplayer_id")
  tcgplayer              TCGPlayer?  @relation(fields: [tcgplayerId], references: [id], onDelete: Cascade)
  cardmarketId           String?     @map("cardmarket_id")
  cardmarket             CardMarket? @relation(fields: [cardmarketId], references: [id], onDelete: Cascade)
  products               Product[]   @relation("PokemonProducts")
}

model Ability {
  id        String  @id @default(uuid())
  name      String
  text      String
  type      String
  pokemon   Pokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)
  pokemonId String
}

model Attack {
  id                  String   @id @default(uuid())
  name                String
  cost                String[]
  convertedEnergyCost Int
  damage              String?
  text                String?
  pokemon             Pokemon  @relation(fields: [pokemonId], references: [id], onDelete: Cascade)
  pokemonId           String
}

model Weakness {
  id        String  @id @default(uuid())
  type      String
  value     String
  pokemon   Pokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)
  pokemonId String
}

model Set {
  id           String      @id
  name         String
  series       String
  printedTotal Int
  total        Int
  releaseDate  DateTime
  updatedAt    DateTime
  imagesId     String?     @map("images_id")
  images       Images?     @relation(fields: [imagesId], references: [id], onDelete: Cascade)
  legalitiesId String?     @map("legalities_id")
  legalities   Legalities? @relation(fields: [legalitiesId], references: [id], onDelete: Cascade)
  Pokemon      Pokemon[]
}

model Legalities {
  id        String    @id @default(uuid())
  unlimited String?
  standard  String?
  expanded  String?
  Pokemon   Pokemon[]
  Set       Set[]
}

model Images {
  id      String    @id @default(uuid())
  small   String
  large   String
  Pokemon Pokemon[]
  Set     Set[]
}

model TCGPlayer {
  id        String    @id @default(uuid())
  url       String
  updatedAt DateTime
  prices    Json
  Pokemon   Pokemon[]
}

model CardMarket {
  id        String    @id @default(uuid())
  url       String
  updatedAt DateTime
  prices    Json
  Pokemon   Pokemon[]
}

model Product {
  id        String      @id @default(uuid()) @db.Uuid
  pokemonId String      @map("pokemon_id")
  pokemon   Pokemon     @relation("PokemonProducts", fields: [pokemonId], references: [id], onDelete: Cascade)
  price     Decimal     @default(0) @db.Decimal(12, 2)
  stock     Int
  condition String
  sellerId  String      @map("seller_id") @db.Uuid
  seller    Seller      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now()) @db.Timestamp(6)
  updatedAt DateTime    @updatedAt
  OrderItem OrderItem[]
}

model Seller {
  id       String    @id @default(uuid()) @db.Uuid
  name     String
  email    String    @unique
  products Product[]
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  password      String?
  role          String?   @default("user")
  address       Json?     @db.Json
  paymentMethod String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
  Account       Account[]
  Session       Session[]
  Cart          Cart[]
  Order         Order[]
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Cart {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String?  @db.Uuid
  sessionCartId String
  items         Json[]
  itemsPrice    Decimal  @db.Decimal(12, 2)
  totalPrice    Decimal  @db.Decimal(12, 2)
  shippingPrice Decimal  @db.Decimal(12, 2)
  taxPrice      Decimal  @db.Decimal(12, 2)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id              String      @id @default(uuid()) @db.Uuid
  userId          String      @db.Uuid
  shippingAddress Json        @db.Json
  paymentMethod   String
  paymentResult   Json?       @db.Json
  itemsPrice      Decimal     @db.Decimal(12, 2)
  totalPrice      Decimal     @db.Decimal(12, 2)
  shippingPrice   Decimal     @db.Decimal(12, 2)
  taxPrice        Decimal     @db.Decimal(12, 2)
  paidAt          DateTime?   @db.Timestamp(6)
  isPaid          Boolean     @default(false)
  deliveredAt     DateTime?   @db.Timestamp(6)
  isDelivered     Boolean     @default(false)
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  OrderItem       OrderItem[]
}

model OrderItem {
  orderId   String  @db.Uuid
  productId String  @db.Uuid
  qty       Int
  price     Decimal @db.Decimal(12, 2)
  name      String
  pokemonId String
  image     String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId], map: "orderItems_orderId_productId_pk")
}
